WebApplication :-
===============


J2EE :- it is an open specification from sun microsystem to develop ApplicationServer s/w .


EJB container :- to manage the business components(the classes which is having business logic ) 

Web-container :- to manage web-components :- (it is a file/class which is having Presentation logic) 


Webserver :- is a small part of the Application server, which is having only one container i.e web-container 
--in java  web-container is called as Servlet container.

--with the Application server ,we can communicate with any type of protocol, http, smtp, tcp.etc..where as webserver only supports http protocol.


web-application :- 
---------------------

--the application that we access through the web, more specifically through the http protocol that will generate html output/ webpage  is known as webapplication.

--a web-application basically contains web-components or webresources like :- html files, images files, servlet program , jsp program ,etc.

--here each web-resource is capable of generating one web-page.

the page is divided into 2 types :-

1.static web-page :- whose content is fixed always for each client ex;- home page of the Gmail.

--static web-pages are pre-created webpages(before the client request)..

--the webresources which generates the static webpage is called as static-webresource program. ex:- html file, image file etc,

2. dynamic webpage :- whose content changes dynamically based on the input values given by the client ex:- inbox of Gmail.

--the web-resource program which generates the dynamic web-pages having dynamic content r called dynamic web-resource program ex:- servlet program, jsp program .

--so a webapplication is a combination of static web-resources and dynamic web-resources.

--web-application resides/hosted  in a web-server.


Web-client :- 
---------------

--resources sake request making program is known as client.

--in web-environment , the program/application which makes the request to our web-application through the http protocol is known as web-client or http-client or user-agent.

--generally for a web-application its a browser s/w . which will act as a web-client for our web-application.

--we gan generate the http request from our java application also , we have some of the other types of s/w / programs  are also there by using which we can generate the http request like POSTMAN.


--whenever we generate a http request to the server,we get a http response from our web-application.

--this http response generally contains html text based on our request , that html text will be rendered in the browser ,and browser display the html content . this type of application is known as normal web application(which sends the html text as response).

--there are another type of web-application which generates the data not the view , so when the client gives the http request to the application , that application (which is hosted on the webserver) does not give view (html text as a response) instead it generates only "data" in the form of plan text, json, xml as a http response . this type of web-application is knwon as Restfull web-services.


--Restfull webservices are one type of web-application only which will be hosted on the web-server and communicated through the http protocol but instead of generating the html text(view) , it will generate the data, in the form of plain text, json, xml format.


webserver :- 
--------------

--it is a resource delivering s/w to the web-client.

--it is piece of s/w which listen the client request continiuosly . 

--in java based web server has only one container s/w i.e web-container / servlet container. this container will manages the dynamic web resource program (servlet program/jsp program) and executes these webresources dynamically ,when they are requested by the client. then it collects the result generated by the web-resource program and then sends the result to the client as http response.


from the client to the server the communication happens throug the http protocol.



Http protocol:-
===========

--http is a protocol that contains set of rules and guidelines to get the communication b/w http client and the webserver .ie. to transfer the hypertext or data between the http-client and webserver.

Http-request (which is generated by the web-client)

Http-response (which is generated by the server based on the result given by the web-resource program)


Http-request structure:-
---------------------------

--this request is generated by the client to pass the request to a web-resource program of a web-application

--this request contains lots of details based on certain structure:-


https://www.gmail.com

https://324.234.43.23/8088/gmailApp/index.html    :- http request 

--requesting for a homepage of the gmail application 


if the method is GET (data will appended as a query string to the uri)

https://324.234.43.23/8088/gmailApp/index.html?usr=admin&pass=123


if the method is POST (data will go through the http request body)

https://324.234.43.23/8088/gmailApp/index.html


http request headers :-
---------------------------

--it will be in the form of key-value pair.

--http request headers are the additional information like :-


Date :-on which data and time request has made.

Host :- request sender ip address.

user-agent :- from which browser/client request has come  
 
connection :- whether the connection is live or lost

cache-control :- whether client supports the cache or not.

content-type :- text/html, application/json, text/xml

cookie :- whether any cookie value is comming or not.

Authentication :- jwt token or some basic auth details

etc..



Http response structure :-
--------------------------------

--this http response will be genrated by the server based on the response given by the request web-resource program.

--this response coming to the client also contains lots of information based on following structure:-


Status code:-
--------------

--generally these response status code will be set by the server for each response.but some time developer can also set the response status code to the response.

--the default status code is 200.

100 - 199 :- information

200-299 :- success 

300-399 :- redirection 

400-499 :- incomplet webresource /Bad request

500 -599 :- server error 


Response Headers :-
-------------------------

-- name of these headers are fixed and values to this headers is assigned by webserver or by the developer , these headers carries some additional information along with the real response to guide the client while displaying the response on the browser .


some of the response header names are :-

1.server :- 
2.refresh :- 
3.set-cookie :- 
4.connection:-
5.last-modified :- 
6.content-type :- 
7.date :- 



Request parameter :-
-------------------------

--it is the data passed from the web-client(browser) for processing by the server side program is known as request parameter.

--request parameters are the name-value pair , i.e every data that is passed to the server side program for the processing from the web-client must have a name.

ex:-

usr=admin   :- this is one request parameter .

if more than one parameters are there they will be concateneted by using & symbol.
ex:-

usr=admin&pass=123


--we pass the request parameter from the browser to the server by following 4 ways:-

1. by typing manually on the browser url .

2.through the hyperlink <a>

3.through the get method of the <form> tag

4.through the post method of the <form> tag.

--if through the Get method we sent the data , it will go as query string 

ex:-

/srv?usr=admin&pass=123

--if through the Post method we send the data , it will go through http request body


Path parameter :-
----------------------

--this data will be supplied to the server side program without the key .

--it is not possible from the browser , it is possible in webservices.



--a WA program is classified into 2 category :-

1.client side program  (java script program) :- it will execute at client machine 

2.server side program :-
---------------------------

--a program that is executed at web-server .

--a server side program does following things in general :-

1.captures the user input

2. if necessary comunicates with the DB server.

3.process the data 

4. produce the dynamic page based on the processed data and hanlde over to the server, then server will forward this page to the client as http response.



Servlet :-
========

--it is a server side java based technology to develop a dynamic web-resource program which will generate the dynamic webpage.

--Server is a sub-specification of J2EE  specification that contains rules and guidelines to develop servlet container/web-container s/w .

 --basically J2EE specification has lots of other subspecifications like server speci, jsp speci, jndi spec, ejb speci,etc..

--Application server is the implementation of all these specification.

jdbc specification :-  jdbc driver s/w  

java.sql
javax.sql

--this jdbc api comes along with the jdk installation.


Servlet specification :- servlet container 

servlet api :- comes in the form of following 2 packages

javax.servlet 
javax.servlet.http package

--this servlet api does not comes along with the jdk installation, 

--in notepad environment,we need to download this api from the internet and set this api related jar file inside our classpath.


--in eclipse , once we configure any java based web/application server , this api will be attched to our eclipse .(available for our application)


folder structure of a java based webapplication:-
--------------------------------------------------------

--different IDE s/w like eclipse, netbean, IntelliJ , they might use thier own folder structure for the development of webapplication , but at the last , they follow same above mentioned structure only .



a servlet :-
------------

--it is a web-component that generate web-page dynamically.

-- it is a container managed public java class that implements "javax.servlet.Servlet" interface .and override all the 5 methods of the Servlet interface .

methods of the Servlet interface :-
----------------------------------------

1. public void init(ServetConfig cfg) throws ServletException

2.public void service(ServletRequest req, ServletResponse resp)throws ServletException, IOException

3.public void destroy()

4.public ServletConfig getServletConfig();

5.public String getServletInfo();


--here above first 3 methods are called as life-cycle method of servlet and remaining 2 are the helper methods.

--2nd method i.e service(--) contains the logic to generate the dynamic webpage.



steps to write a servlet program by implementing Servlet interface :-
---------------------------------------------------------------------------------

step 1:- create a dynamic web application (by configuring webserver in the eclipse)

step 2:- create a public java class by implementing Servlet interface

step 3:- override all the 5 methods inside this class .

step 4:- write all dynamic page generation logic inside the service() method.

step 5:- register that java class inside the Deployment descriptor file called "web.xml" file by providing a url for our servlet.


--in the letest version of eclipse ,we need to place all our *.html, *jsp,*jpg,public etc files 
inside the "webapp" folder .

--in older version of eclipse we need to place those files inside the "WebContent" folder.


--A servlet has 3 name :-

1. registration name :- 

2.fully qualified class name

3.url name (url pattern)

--we always give the request to the servlet by using its url name only.


web.xml:-
-----------

<?xml version="1.0" encoding="UTF-8"?>

<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" version="4.0">


<servlet>

	<servlet-name>one</servlet-name> 
	<servlet-class>com.kumaran.Srv1</servlet-class> 

</servlet>



<servlet-mapping>

	<servlet-name>one</servlet-name> 
	<url-pattern>/first</url-pattern>


</servlet-mapping>

</web-app>



Note:- the class which is acting as servlet program must be public and must have zero argument constructor.
--this class  can not have only parameterized constrcutor.


--creating object of the Servler class, managing that object, destroying that obj, and executing life-cycle methods on that obj , is not the responsibility of the programmer , all these operation will be taken care by web-container.



html to servlet communication:-
----------------------------------------

--genereting the output on the browser:-
-------------------------------------------------



	public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException {
		
		res.setContentType("text/html");
		
		PrintWriter pw= res.getWriter();
		
		
		//pw.print("<body bgcolor='wheat'> <h1>Welcome to Servlet</h1> </body>");
		
		pw.print("<body bgcolor='cyan'>");
		
		pw.print("<h1>Welcome to Servlet</h1>");

		pw.print("<a href='home.html'>Go Back</a>");
		
		pw.print("</body>");
		
		
		pw.close();
		
		
	}


--in html , to servlet communication the request to our servlet should be sent through the html page..

--if we want to launch our home page as we run our application then we have 2 options :-

1. give the name of our home page as "index.html"

2.make an entry inside the web.xml file as <welcome-file-list> tag. in this approcah we can take any name of our home page.


<welcome-file-list>

	<welcome-file>home.html</welcome-file>

</welcome-file-list>



life-cycle of a servlet:-
================


--whenever web-container recieves the first client request for a servlet through its url pattern, container will loads the Servlet class from the secondary memory to the primary memory dynamically, and creates the obj of the loaded class by calling zero argument constrcutor.

--here our servlet object is ready but it can not serves the client request, becoz at this point , it is missing with 2 piece of information.

1.initial configuraiton information

2.context information

--configuration information is written inside the DD file 'web.xml' file.

--to get these 2 piece of information, servlet container  creates "ServletConfig(I)" object and in this object web-container encapsulate above 2 missing information.

--now container will call 1st life-cycle method i.e init(-) by passing ServletConfig object as argument.

Note:- until init(-) method is completly executed , servlet does not serve the client request..


--second client request onwards ,(container will not repeat the above process), same servlet instance serves any number of client request.

--from second request onwards only the service() method will be called.

--init(-) method called by the webcontainer only once in the whole life of a servlet.

--as a developer ,we can write resource allocation logic code inside this init() method ex:-

db-connection creation, acquring printer connection,etc.



--in order to call 2nd life-cycle method i.e service(--) , container will create 2 object i.e ServletRequest(I) object and ServletResponse(I) object , and pass those reff to the service(--) method as argument.


ServletRequest will encapsulate all the details about the client request (from this object only we can access the client supplied data i.e request parameters by calling req.getParameter(-) method by passing req parameter name )

--by using ServletResponse object we can send (write) the dynamic response to the client.

res.setContentType("text/html");  // setting the content type 
PrintWriter pw= res.getWriter();  // getting the writter 
		

--one service(--) method is completly executed means one client request is processed and response page is sent.

--now for each each client request , container will call the service(--) method only.


--just before container marks the servlet class object for the garbage collection it will call destroy() method on that object.

--as a developer we will write resource deallocation logic inside this destroy() method.
ex:- closing the DB connection.


Note:- servlet is a single instance mutiple thread server side component, that means when multiple requests are given to a servlet simulteniously, only one object of a servlet will be created and multiple threads will be started on that object, representing multiple request.

--each req coming to a servlet will execute service() method independently to the process the request.


Servlet- DB communication :-
-------------------------------------


****here we need to place jdbc driver related jar file inside the lib folder of our application.



	
	@Override
	public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException {
		
		res.setContentType("text/html");
		PrintWriter pw= res.getWriter();
		
		
		
		//getting the data from the client 
		String sroll=req.getParameter("roll");
		String sname=req.getParameter("name");
		String smarks=req.getParameter("marks");
		
		
		//converting data to the appropriate type 
		int roll= Integer.parseInt(sroll);
		int marks= Integer.parseInt(smarks);
		
		//processing the data 
	
		
		try {
			Class.forName("com.mysql.jdbc.Driver");
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		String url="jdbc:mysql://localhost:3306/ratandb";
		
		try(Connection conn = DriverManager.getConnection(url,"root","root")) {
			
			
			PreparedStatement ps= conn.prepareStatement("insert into student values(?,?,?)");
			
			ps.setInt(1, roll);
			ps.setInt(2, marks);
			ps.setString(3, sname);
			
			int x= ps.executeUpdate();
			

			//presenting the result..
			pw.print("<body bgcolor='yellow'>");
		
			
			if(x >0)
					pw.print("<h1>Record Inserted Sucessfully </h1> <br><br>");
			else
				pw.print("<h1> Not Inserted...</h1> <br><br>");
				
			
			
			
			pw.print("<a href='home.html'>Go Back</a>");
			
			pw.print("</body>");
			
			
			pw.close();
				
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}





--the above application is not upto to marks with respect to performance wise ..

--to solve this problem we need to open the connection and create the PreparedStartement object inside the init(-) method and bind the user supplied value inside the service(--) method and close the connection inside the destroy() method.

ex:-


Srv1.java:-
------------

package com.kumaran;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import javax.servlet.Servlet;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;

public class Srv1 implements Servlet {

	private Connection conn;
	private PreparedStatement ps;
	
	
	@Override
	public void destroy() {
		
		try {
			conn.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}

	@Override
	public ServletConfig getServletConfig() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getServletInfo() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void init(ServletConfig config) throws ServletException {

		try {
			Class.forName("com.mysql.jdbc.Driver");
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		String url="jdbc:mysql://localhost:3306/ratandb";
		
		try{
		
			 conn = DriverManager.getConnection(url,"root","root"); 
		
			 ps= conn.prepareStatement("insert into student values(?,?,?)");
		
			 
		}
		catch (SQLException e) {
			e.printStackTrace();
		}
			
			
			
	}

	
	
	@Override
	public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException {
		
		res.setContentType("text/html");
		PrintWriter pw= res.getWriter();
		
		
		
		//getting the data from the client 
		String sroll=req.getParameter("roll");
		String sname=req.getParameter("name");
		String smarks=req.getParameter("marks");
		
		
		//converting data to the appropriate type 
		int roll= Integer.parseInt(sroll);
		int marks= Integer.parseInt(smarks);
		
		//processing the data 
	
			try {
			ps.setInt(1, roll);
			ps.setInt(2, marks);
			ps.setString(3, sname);
			
			int x= ps.executeUpdate();
			

			//presenting the result..
			pw.print("<body bgcolor='yellow'>");
		
			
			if(x >0)
					pw.print("<h1>Record Inserted Sucessfully </h1> <br><br>");
			else
				pw.print("<h1> Not Inserted...</h1> <br><br>");
				
			
			
			
			pw.print("<a href='home.html'>Go Back</a>");
			
			pw.print("</body>");
			
			
			pw.close();
				
			}catch (SQLException e) {
				e.printStackTrace();
			}		
		
	}

}


--converting Dynmaic webappliation as a maven application :-
================================================

--in this approach we need not place the 3rd party jar files inside the lib folder of our application, 
--just we need to place the dependencies inside the pom.xml file.


Note:- once we try to export the application, we will see all the files and jar files in the original standard directory strcuture.




initialization parameter :- (init-param)
-----------------------------

--it is a name value pair of textual information supplied to a servlet as extra configuration information, 

--this init parameters is supplied to a servlet by web.xml file with the help of <init-param> tag.

--it is paired tag which contains 2 child tag :-

<param-name>
<param-value>


--by using this tag we can supply n number of textual information to a servlet as required from the outside of the servlet.


ex:-


<servlet>

	<servlet-name>one</servlet-name> 
	<servlet-class>com.kumaran.Srv1</servlet-class> 


	<init-param>
		<param-name>city</param-name>
		<param-value>Chennai</param-value>
	</init-param>


	<init-param>
		<param-name>state</param-name>
		<param-value>india</param-value>
	</init-param>



</servlet>


--during ServletConfig object creation time , container encapsulate all the init parameters into this ServletConfig object.


--by calling getInitParameter() method on this ServletConfig object by supplying param-name as argument we get the param value inside our servlet class.


web.xml:-
--------------

<?xml version="1.0" encoding="UTF-8"?>

<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" version="4.0">


<servlet>

	<servlet-name>one</servlet-name> 
	<servlet-class>com.kumaran.Srv1</servlet-class> 


	<init-param>
		<param-name>driverName</param-name>
		<param-value>com.mysql.jdbc.Driver</param-value>
	</init-param>


	<init-param>
		<param-name>url</param-name>
		<param-value>jdbc:mysql://localhost:3306/ratandb</param-value>
	</init-param>

	<init-param>
		<param-name>username</param-name>
		<param-value>root</param-value>
	</init-param>

	<init-param>
		<param-name>password</param-name>
		<param-value>root</param-value>
	</init-param>



</servlet>



<servlet-mapping>

	<servlet-name>one</servlet-name> 
	<url-pattern>/first</url-pattern>


</servlet-mapping>

<welcome-file-list>

	<welcome-file>home.html</welcome-file>

</welcome-file-list>

</web-app>


Srv1.java:-
-------------

package com.kumaran;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import javax.servlet.Servlet;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;

public class Srv1 implements Servlet {

	private Connection conn;
	private PreparedStatement ps;

	ServletConfig config;
	
	
	
	@Override
	public void destroy() {
		
		try {
			conn.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}

	@Override
	public ServletConfig getServletConfig() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getServletInfo() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void init(ServletConfig config) throws ServletException {
	
		//assigning the container given ServletConfig object to the instance variable
		//to resolve the local scope problem
		//and now we can utilize this ServletConfig object inside the service(--) method also.
		this.config=config;
		
		String dname= config.getInitParameter("driverName");
		String url= config.getInitParameter("url");
		String username= config.getInitParameter("username");
		String password= config.getInitParameter("passsword");
			
		
		
		 

		try {
			Class.forName(dname);
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
		try{
		
			 conn = DriverManager.getConnection(url,username,password); 
		
			 ps= conn.prepareStatement("insert into student values(?,?,?)");
		
			 
		}
		catch (SQLException e) {
			e.printStackTrace();
		}
			
			
			
	}

	
	
	@Override
	public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException {
		
		res.setContentType("text/html");
		PrintWriter pw= res.getWriter();
		
		
		
		
		//getting the data from the client 
		String sroll=req.getParameter("roll");
		String sname=req.getParameter("name");
		String smarks=req.getParameter("marks");
		
		
		//converting data to the appropriate type 
		int roll= Integer.parseInt(sroll);
		int marks= Integer.parseInt(smarks);
		
		//processing the data 
	
			try {
			ps.setInt(1, roll);
			ps.setInt(2, marks);
			ps.setString(3, sname);
			
			int x= ps.executeUpdate();
			

			//presenting the result..
			pw.print("<body bgcolor='yellow'>");
		
			
			if(x >0)
					pw.print("<h1>Record Inserted Sucessfully </h1> <br><br>");
			else
				pw.print("<h1> Not Inserted...</h1> <br><br>");
				
			
			
			
			pw.print("<a href='home.html'>Go Back</a>");
			pw.print("</body>");
			
			
			pw.close();
				
			}catch (SQLException e) {
				e.printStackTrace();
			}
			
		
	}

}











































































 














